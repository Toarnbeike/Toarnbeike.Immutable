using System.Diagnostics.CodeAnalysis;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace Toarnbeike.Immutable.SourceGeneration.Entities;

/// <summary>
/// Generates a partial implementation of an EntityKey,
/// that provides a static New method and interface implementation.
/// </summary>
[Generator]
[ExcludeFromCodeCoverage]
public class EntityKeyGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var entityKeyRecords = context.SyntaxProvider
            .ForAttributeWithMetadataName(
                EntityKeyInfo.EntityKeyAttributeFqn,
                predicate: static (node, _) => node is RecordDeclarationSyntax,
                transform: static (ctx, _) => EntityKeyInfo.Create((INamedTypeSymbol)ctx.TargetSymbol))
            .Where(static m => m is not null);

        context.RegisterSourceOutput(entityKeyRecords, static (spc, record) => Execute(spc, record!));
    }

    private static void Execute(SourceProductionContext context, EntityKeyInfo entityKeyInfo)
    {
        var source = GenerateEntityKeyImplementation(entityKeyInfo);
        var fileName = $"{entityKeyInfo.Namespace}.{entityKeyInfo.Name}.g.cs";
        
        context.AddSource(fileName, SourceText.From(source, Encoding.UTF8));
    }

    private static string GenerateEntityKeyImplementation(EntityKeyInfo entityKeyInfo)
    {
        return $$"""
                    // <auto-generated />
                    // generator: Toarnbeike.Immutable.SourceGeneration.Entities.EntityKeyGenerator
                    #nullable enable

                    using System;
                    using Toarnbeike.Immutable.Entities;

                    namespace {{entityKeyInfo.Namespace}};

                    public readonly partial record struct {{entityKeyInfo.Name}} : IEntityKey<{{entityKeyInfo.Name}}>
                    {
                        /// <inheritdoc />
                        public static {{entityKeyInfo.Name}} New() => new(Guid.CreateVersion7());
                        
                        /// <inheritdoc />
                        public static {{entityKeyInfo.Name}} Empty => new(Guid.Empty);
                    }
""";
    }
}