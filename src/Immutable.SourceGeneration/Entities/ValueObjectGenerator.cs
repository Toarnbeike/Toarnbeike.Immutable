using Toarnbeike.Immutable.SourceGeneration.Extensions;
using Toarnbeike.Immutable.SourceGeneration.TypeInformation;

namespace Toarnbeike.Immutable.SourceGeneration.Entities;

internal static class ValueObjectGenerator
{
    public static string Execute(ValueObjectInfo valueObject)
    {
        var createParameters = valueObject.Properties.ToParameterList(includeDefault: true);
        var constructorParameters = string.Join(", ", valueObject.Properties
            .Where(p => !p.HasDefaultValue && !p.IsReadOnly)
            .Select(p => p.ToParameterName()));
        var existingConstructorParams = valueObject.Properties.ToParameterList(includeDefault: false);
        var notNullAssignment = valueObject.Properties.ToNotNullAssignments("valueObject");
        var constructorAssignments = valueObject.Properties.ToAssignments();
        
        return $$"""
                 // <auto-generated />
                 // generator: {{typeof(ValueObjectGenerator).FullName}}
                 #nullable enable

                 namespace {{valueObject.Namespace}};
                 public partial record {{valueObject.Name}}
                 {
                     /// <summary>
                     /// Create a new instance of the {{valueObject.Name}}.
                     /// </summary>
                     public static {{valueObject.Name}} Create({{createParameters}})
                     {
                         var valueObject = new {{valueObject.Name}}({{constructorParameters}});
                 {{notNullAssignment}}
                         return valueObject;
                     }

                     private {{valueObject.Name}}({{existingConstructorParams}})
                     {
                        {{constructorAssignments}}
                     }
                 }
                 """;
    }

    public static string FileName(ValueObjectInfo valueObject) => 
        $"{valueObject.Namespace}.{valueObject.Name}.g.cs";
}