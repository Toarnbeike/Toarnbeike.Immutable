using Toarnbeike.Immutable.SourceGeneration.Extensions;
using Toarnbeike.Immutable.SourceGeneration.TypeInformation;

namespace Toarnbeike.Immutable.SourceGeneration.Entities;

internal static class AggregateGenerator
{
    public static string Execute(AggregateInfo aggregate)
    {
        var createNewParameters = aggregate.Properties.ToParameterList(includeDefault: true);
        var createNewConstructorParameters = string.Join(", ", aggregate.Properties
            .Where(p => !p.HasDefaultValue && !p.IsReadOnly)
            .Select(p => p.Name.ToParameterName()));

        var createExistingParameters = aggregate.Properties.ToParameterList(
            prefix: $"{aggregate.EntityKeyInfo.Name} id", includeDefault: true);
        var createExistingConstructorParameters = "id" + (string.IsNullOrEmpty(createNewConstructorParameters) ? "" : ", " + createNewConstructorParameters);
        
        var newConstructorParams = aggregate.Properties.ToParameterList();
        var existingConstructorParams = aggregate.Properties.ToParameterList(
            prefix: $"{aggregate.EntityKeyInfo.Name} id", includeDefault: false);
        
        var notNullAssignment = aggregate.Properties.ToNotNullAssignments("entity");
        var constructorAssignments = aggregate.Properties.ToAssignments();
        
        return $$"""
                 // <auto-generated />
                 // generator: Toarnbeike.Immutable.SourceGeneration.Entities.AggregateGenerator
                 #nullable enable

                 using {{aggregate.EntityKeyInfo.Namespace}};

                 namespace {{aggregate.Namespace}};
                 public partial record {{aggregate.Name}}
                 {
                     /// <summary>
                     /// Create a new instance of the {{aggregate.Name}}.
                     /// </summary>
                     public static {{aggregate.Name}} CreateNew({{createNewParameters}})
                     {
                         var entity = new {{aggregate.Name}}({{createNewConstructorParameters}});
                 {{notNullAssignment}}
                         return entity;
                     }
                     
                     /// <summary>
                     /// Recreate an existing instance of the {{aggregate.Name}}.
                     /// </summary>
                     public static {{aggregate.Name}} CreateExisting({{createExistingParameters}})
                     {
                         var entity = new {{aggregate.Name}}({{createExistingConstructorParameters}});
                 {{notNullAssignment}}
                         return entity;
                     }

                     private {{aggregate.Name}}({{existingConstructorParams}}) : base(id)
                     {
                        {{constructorAssignments}}
                     }

                     private {{aggregate.Name}}({{newConstructorParams}})
                     {
                        {{constructorAssignments}}
                     }
                 }
                 """;
    }

    public static string FileName(AggregateInfo aggregate) => 
        $"{aggregate.Namespace}.{aggregate.Name}.g.cs";
}