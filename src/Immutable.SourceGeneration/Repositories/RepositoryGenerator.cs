using Toarnbeike.Immutable.SourceGeneration.Entities;
using Toarnbeike.Immutable.SourceGeneration.TypeInformation;

namespace Toarnbeike.Immutable.SourceGeneration.Repositories;

internal static class RepositoryGenerator
{
    public static string Execute(AggregateInfo aggregate)
    {
        var repoName = $"{aggregate.Name}Repository";
        var genericTypeCouple = $"<{aggregate.Name}, {aggregate.EntityKeyInfo.Name}>";
        
        return $$"""
                 // <auto-generated />
                 // generator: Toarnbeike.Immutable.SourceGeneration.Entities.AggregateGenerator
                 #nullable enable

                 using {{aggregate.EntityKeyInfo.Namespace}};
                 using Toarnbeike.Immutable.Internal;
                 using Toarnbeike.Immutable.Mutations;
                 using Toarnbeike.Immutable.Repositories;

                 namespace {{aggregate.Namespace}};

                 public partial interface I{{repoName}} : IAggregateRepository{{genericTypeCouple}};

                 public partial class {{repoName}} : AggregateRepository{{genericTypeCouple}}, I{{repoName}}
                 {
                     public {{repoName}}(IMutationStore mutationStore, IDataContext dataContext) : base(mutationStore)
                     {
                         Entities = dataContext.{{aggregate.Name}}s;
                     }
                 }
                 """;
    }
    
    public static string FileName(AggregateInfo aggregate) =>
        $"{aggregate.Namespace}.{aggregate.Name}Repository.g.cs";
}