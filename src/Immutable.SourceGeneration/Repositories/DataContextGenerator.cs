using Toarnbeike.Immutable.SourceGeneration.Entities;
using Toarnbeike.Immutable.SourceGeneration.TypeInformation;

namespace Toarnbeike.Immutable.SourceGeneration.Repositories;

internal static class DataContextGenerator
{
    public static string Execute(IReadOnlyList<AggregateInfo> aggregates)
    {
        var entityUsings = string.Join("\n", aggregates
            .Select(x => x.Namespace)
            .Distinct()
            .Select(u => $"using {u};"));

        var interfaceDictionaries = string.Join("\n    ", aggregates
            .Select(aggregate => $$"""Dictionary<{{GetDictionaryCouple(aggregate)}}> {{aggregate.Name}}s { get; }"""));
        
        var classDictionaries = string.Join("\n    ", aggregates
            .Select(aggregate => $$"""public Dictionary<{{GetDictionaryCouple(aggregate)}}> {{aggregate.Name}}s { get; private set; } = new(); """));
        
        return $$"""
                 // <auto-generated />
                 // generator: Toarnbeike.Immutable.SourceGeneration.Entities.AggregateGenerator
                 #nullable enable

                 {{entityUsings}}

                 namespace Toarnbeike.Immutable.Internal.DataContext;

                 public partial interface IDataContext
                 {
                     {{interfaceDictionaries}}  
                 }

                 public sealed partial class DataContext : IDataContext
                 {
                     {{classDictionaries}}
                 }
                 """;
    }
    
    public const string FileName = "DataContext.g.cs";
    
    private static string GetDictionaryCouple(AggregateInfo aggregate) =>
        $"{aggregate.EntityKeyInfo.Name}, {aggregate.Name}";
}