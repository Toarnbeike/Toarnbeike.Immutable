using Toarnbeike.Immutable.SourceGeneration.Entities;
using Toarnbeike.Immutable.SourceGeneration.TypeInformation;

namespace Toarnbeike.Immutable.SourceGeneration.Tests.Entities;

public class EntityKeyGeneratorTests
{
    private readonly EntityKeyInfo _entityKeyInfo =
        new("EntityKey", "KeyNamespace");

    [Fact]
    public void FileName_Should_IncludeNamespace()
    {
        var result = EntityKeyGenerator.FileName(_entityKeyInfo);
        result.ShouldNotBeNull();
        result.ShouldContain(_entityKeyInfo.Namespace);
    }

    [Fact]
    public void FileName_Should_IncludeName()
    {
        var result = EntityKeyGenerator.FileName(_entityKeyInfo);
        result.ShouldContain(_entityKeyInfo.Name);
    }

    [Fact]
    public void FileName_Should_IncludeCorrectFileExtension()
    {
        var result = EntityKeyGenerator.FileName(_entityKeyInfo);
        result.ShouldEndWith(".g.cs");
    }

    [Fact]
    public void Execute_Should_IncludeGeneratorInformation()
    {
        var result = EntityKeyGenerator.Execute(_entityKeyInfo);
        result.ShouldNotBeNull();
        result.ShouldContain("// <auto-generated />");
        result.ShouldContain(typeof(EntityKeyGenerator).FullName!);
    }

    [Fact]
    public void Execute_Should_IncludeDefaultNamespaces()
    {
        var result = EntityKeyGenerator.Execute(_entityKeyInfo);
        result.ShouldContain("using System;");
        result.ShouldContain("using Toarnbeike.Immutable.Entities;");
    }
    
    [Fact]
    public void Execute_Should_IncludeCorrectNamespace()
    {
        var result = EntityKeyGenerator.Execute(_entityKeyInfo);
        result.ShouldContain($"namespace {_entityKeyInfo.Namespace}");
    }

    [Fact]
    public void Execute_Should_IncludeCorrectPartialRecordDeclaration()
    {
        var result = EntityKeyGenerator.Execute(_entityKeyInfo);
        result.ShouldContain("public readonly partial record struct EntityKey(Guid Value) : IEntityKey<EntityKey>");
    }

    [Fact]
    public void Execute_Should_IncludeStaticNew()
    {
        var result = EntityKeyGenerator.Execute(_entityKeyInfo);
        result.ShouldContain("public static EntityKey New() => new(Guid.CreateVersion7());");
    }

    [Fact]
    public void Execute_Should_IncludeEmpty()
    {
        var result = EntityKeyGenerator.Execute(_entityKeyInfo);
        result.ShouldContain("public static EntityKey Empty => new(Guid.Empty);");
    }
}