using Toarnbeike.Immutable.SourceGeneration.Entities;
using Toarnbeike.Immutable.SourceGeneration.TypeInformation;

namespace Toarnbeike.Immutable.SourceGeneration.Tests.Entities;

public class AggregateGeneratorTests
{
    private readonly AggregateInfo _aggregateInfo;
    private readonly EntityKeyInfo _entityKeyInfo;

    private readonly PropertyInfo _settableProperty =
        new("Name", "string", false, false, false);

    private readonly PropertyInfo _readOnlyProperty =
        new("Calculated", "int", true, false, true);

    private readonly PropertyInfo _defaultValueTypeProperty =
        new("Value", "int", false, true, true);

    private readonly PropertyInfo _defaultReferenceProperty =
        new("Reference", "string", false, true, false);

    public AggregateGeneratorTests()
    {
        List<PropertyInfo> properties = 
            [_settableProperty, _readOnlyProperty, _defaultValueTypeProperty, _defaultReferenceProperty];
        _entityKeyInfo = new EntityKeyInfo("AggregateKey", "KeyNamespace");
        _aggregateInfo = new AggregateInfo("Aggregate", "AggregateNamespace", _entityKeyInfo, properties);
    }

    [Fact]
    public void FileName_Should_IncludeNamespace()
    {
        var result = AggregateGenerator.FileName(_aggregateInfo);
        result.ShouldNotBeNull();
        result.ShouldContain(_aggregateInfo.Namespace);
    }

    [Fact]
    public void FileName_Should_IncludeName()
    {
        var result = AggregateGenerator.FileName(_aggregateInfo);
        result.ShouldContain(_aggregateInfo.Name);
    }

    [Fact]
    public void FileName_Should_IncludeCorrectFileExtension()
    {
        var result = AggregateGenerator.FileName(_aggregateInfo);
        result.ShouldEndWith(".g.cs");
    }

    [Fact]
    public void Execute_Should_IncludeGeneratorInformation()
    {
        var result = AggregateGenerator.Execute(_aggregateInfo);
        result.ShouldNotBeNull();
        result.ShouldContain("// <auto-generated />");
        result.ShouldContain(typeof(AggregateGenerator).FullName!);
    }

    [Fact]
    public void Execute_Should_IncludeNamespaceOfKey_AsUsing()
    {
        var result = AggregateGenerator.Execute(_aggregateInfo);
        result.ShouldContain($"using {_entityKeyInfo.Namespace};");
    }

    [Fact]
    public void Execute_Should_IncludeCorrectNamespace()
    {
        var result = AggregateGenerator.Execute(_aggregateInfo);
        result.ShouldContain($"namespace {_aggregateInfo.Namespace}");
    }

    [Fact]
    public void Execute_Should_IncludeCorrectPartialClassDeclaration()
    {
        var result = AggregateGenerator.Execute(_aggregateInfo);
        result.ShouldContain("public partial record");
    }

    [Fact]
    public void Execute_Should_IncludeStaticCreateNew_WithCorrectParameters()
    {
        var result = AggregateGenerator.Execute(_aggregateInfo);
        result.ShouldContain("public static Aggregate CreateNew(string name, int? value = null, string? reference = null)");
    }

    [Fact]
    public void Execute_Should_IncludeStaticCreateExisting_WithCorrectParameters()
    {
        var result = AggregateGenerator.Execute(_aggregateInfo);
        result.ShouldContain($"public static Aggregate CreateExisting({_entityKeyInfo.Name} id, string name, int? value = null, string? reference = null)");
    }
}