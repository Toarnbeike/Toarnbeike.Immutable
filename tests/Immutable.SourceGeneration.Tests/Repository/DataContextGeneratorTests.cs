using System.Xml.XPath;
using Toarnbeike.Immutable.SourceGeneration.Entities;
using Toarnbeike.Immutable.SourceGeneration.Repositories;
using Toarnbeike.Immutable.SourceGeneration.TypeInformation;

namespace Toarnbeike.Immutable.SourceGeneration.Tests.Repository;

public class DataContextGeneratorTests
{
    private readonly IReadOnlyList<AggregateInfo> _aggregates;

    public DataContextGeneratorTests()
    {
        var aggregate1 = new AggregateInfo("Agg1", "Ns1", new EntityKeyInfo("Key1", "nsKey1"));
        var aggregate2 = new AggregateInfo("Agg2", "Ns2", new EntityKeyInfo("Key2", "nsKey2"), "Agg2Collection");

        _aggregates = [aggregate1, aggregate2];
    }
    
    [Fact]
    public void FileName_ShouldBe()
    {
        DataContextGenerator.FileName.ShouldBe("DataContext.g.cs");
    }

    [Fact]
    public void Execute_Should_IncludeGeneratorInformation()
    {
        var result = DataContextGenerator.Execute(_aggregates);
        result.ShouldNotBeNull();
        result.ShouldContain("// <auto-generated />");
        result.ShouldContain(typeof(DataContextGenerator).FullName!);
    }
    
    [Fact]
    public void Execute_Should_IncludeUsingsOfAllAggregates()
    {
        var result = DataContextGenerator.Execute(_aggregates);
        result.ShouldContain("using Ns1;");
        result.ShouldContain("using Ns2;");
    }

    [Fact]
    public void Execute_Should_IncludeNamespace()
    {
        var result = DataContextGenerator.Execute(_aggregates);
        result.ShouldContain("namespace Toarnbeike.Immutable.Internal.DataContext;");
    }
    
    [Fact]
    public void Execute_Should_IncludeInterface()
    {
        var result = DataContextGenerator.Execute(_aggregates);
        result.ShouldContain("public partial interface IDataContext");
    }

    [Fact]
    public void Execute_Should_IncludeSealedClass()
    {
        var result = DataContextGenerator.Execute(_aggregates);
        result.ShouldContain("public sealed partial class DataContext : IDataContext");
    }

    [Fact]
    public void Execute_Should_IncludeDictionaries_ForEachAggregate_InterfaceEdition()
    {
        var result = DataContextGenerator.Execute(_aggregates);
        result.ShouldContain("Dictionary<Key1, Agg1> Agg1s { get; }");
        result.ShouldContain("Dictionary<Key2, Agg2> Agg2Collection { get; }");
    }
    
    [Fact]
    public void Execute_Should_IncludeDictionaries_ForEachAggregate_ImplementationEdition()
    {
        var result = DataContextGenerator.Execute(_aggregates);
        result.ShouldContain("public Dictionary<Key1, Agg1> Agg1s { get; private set; } = new();");
        result.ShouldContain("public Dictionary<Key2, Agg2> Agg2Collection { get; private set; } = new();");
    }
}